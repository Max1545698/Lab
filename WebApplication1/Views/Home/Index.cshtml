@model string
<!DOCTYPE html>

<html>
<head>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css" integrity="sha384-Vkoo8x4CGsO3+Hhxv8T/Q5PaXtkKtu6ug5TOeNV6gBiFeWPGFN9MuhOf23Q9Ifjh" crossorigin="anonymous">
    <meta name="viewport" content="width=device-width" />
    <title>Index</title>
</head>
<body>
    <textarea class="form-control col-3 m-2" id="doc">
        @Model
    </textarea>
    <a id="btn-save" class="btn btn-success text-white m-2">Save</a>
</body>
</html>

<script>
    document.getElementById('btn-save').onclick = _ => {
        Http.PostJson("Home/Save/", { text: document.getElementById('doc').value });
        alert('XML was saved succesfully');
    }

    class Http {
        static PostJson(url, data) {
            return fetch(url, {
                method: 'post',
                headers: {
                    'Content-Type': 'application/x-www-form-urlencoded; charset=UTF-8',
                    'Accept': 'application/json'
                },
                body: Http.GetFormParams(data)
            })
                .then(response => response.json());
        }

        static GetJson(url, data) {
            if (data) {
                url = Http.CreateUrlWithGetParams(url, data);
            }

            return fetch(url)
                .then(response => response.json());
        }

        static CreateUrlWithGetParams(url, data) {
            var res = url + "?";

            for (let key in data) {
                let value = data[key];
                res += key + '=' + value + '&';
            }

            return res;
        }

        static GetFormParams(params, keys = [], isArray = false) {
            const p = Object.keys(params).map(key => {
                let val = params[key];

                if ("[object Object]" === Object.prototype.toString.call(val) || Array.isArray(val)) {
                    if (Array.isArray(params)) {
                        keys.push("");
                    } else {
                        keys.push(key);
                    }

                    return Http.GetFormParams(val, keys, Array.isArray(val));
                } else {
                    let tKey = key;

                    if (keys.length > 0) {
                        const tKeys = isArray ? keys : [...keys, key];
                        tKey = tKeys.reduce((str, k) => { return "" === str ? k : `${str}[${k}]`; }, "");
                    }
                    if (isArray) {
                        return `${tKey}[]=${val}`;
                    } else {
                        return `${tKey}=${val}`;
                    }

                }
            }).join('&');

            keys.pop();
            return p;
        }

        static IsOkResponse(response) {
            return response.status === 1;
        }
    }
</script>

<script src="https://code.jquery.com/jquery-3.4.1.slim.min.js" integrity="sha384-J6qa4849blE2+poT4WnyKhv5vZF5SrPo0iEjwBvKU7imGFAV0wwj1yYfoRSJoZ+n" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.0/dist/umd/popper.min.js" integrity="sha384-Q6E9RHvbIyZFJoft+2mJbHaEWldlvI9IOYy5n3zV9zzTtmI3UksdQRVvoxMfooAo" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.4.1/js/bootstrap.min.js" integrity="sha384-wfSDF2E50Y2D1uUdj0O3uMBJnjuUD4Ih7YwaYd1iqfktj0Uod8GCExl3Og8ifwB6" crossorigin="anonymous"></script>
